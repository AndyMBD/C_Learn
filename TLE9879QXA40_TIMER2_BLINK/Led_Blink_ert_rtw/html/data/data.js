var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"Led_Blink","ref":false,"files":[{"name":"Led_Blink.c","type":"source","group":"model","path":"D:\\TLE9879\\Project\\TLE9879QXA40_TIMER2_BLINK\\Led_Blink_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: Led_Blink.c\r\n *\r\n * Code generated for Simulink model 'Led_Blink'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun  1 21:03:42 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Led_Blink.h\"\r\n#include \"Led_Blink_private.h\"\r\n\r\n/* Block states (default storage) */\r\nDW_Led_Blink_T Led_Blink_DW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY_Led_Blink_T Led_Blink_Y;\r\n\r\n/* Model step function */\r\nvoid Led_Blink_step(void)\r\n{\r\n  int32_T rtb_PulseGenerator;\r\n\r\n  /* DiscretePulseGenerator: '<Root>/Pulse Generator' */\r\n  rtb_PulseGenerator = ((Led_Blink_DW.clockTickCounter < 500) &&\r\n                        (Led_Blink_DW.clockTickCounter >= 0));\r\n  if (Led_Blink_DW.clockTickCounter >= 999) {\r\n    Led_Blink_DW.clockTickCounter = 0;\r\n  } else {\r\n    Led_Blink_DW.clockTickCounter++;\r\n  }\r\n\r\n  /* End of DiscretePulseGenerator: '<Root>/Pulse Generator' */\r\n\r\n  /* Outport: '<Root>/Out1' incorporates:\r\n   *  DataTypeConversion: '<Root>/Data Type Conversion'\r\n   */\r\n  Led_Blink_Y.Out1 = (uint8_T)rtb_PulseGenerator;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Led_Blink_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)&Led_Blink_DW, 0,\r\n                sizeof(DW_Led_Blink_T));\r\n\r\n  /* Start for DiscretePulseGenerator: '<Root>/Pulse Generator' */\r\n  Led_Blink_DW.clockTickCounter = 0;\r\n}\r\n\r\n/* Model terminate function */\r\nvoid Led_Blink_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Led_Blink.h","type":"header","group":"model","path":"D:\\TLE9879\\Project\\TLE9879QXA40_TIMER2_BLINK\\Led_Blink_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: Led_Blink.h\r\n *\r\n * Code generated for Simulink model 'Led_Blink'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun  1 21:03:42 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_Led_Blink_h_\r\n#define RTW_HEADER_Led_Blink_h_\r\n#include <string.h>\r\n#ifndef Led_Blink_COMMON_INCLUDES_\r\n#define Led_Blink_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* Led_Blink_COMMON_INCLUDES_ */\r\n\r\n#include \"Led_Blink_types.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  int32_T clockTickCounter;            /* '<Root>/Pulse Generator' */\r\n} DW_Led_Blink_T;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  uint8_T Out1;                        /* '<Root>/Out1' */\r\n} ExtY_Led_Blink_T;\r\n\r\n/* Block states (default storage) */\r\nextern DW_Led_Blink_T Led_Blink_DW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY_Led_Blink_T Led_Blink_Y;\r\n\r\n/* Model entry point functions */\r\nextern void Led_Blink_initialize(void);\r\nextern void Led_Blink_step(void);\r\nextern void Led_Blink_terminate(void);\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'Led_Blink'\r\n */\r\n#endif                                 /* RTW_HEADER_Led_Blink_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Led_Blink_private.h","type":"header","group":"model","path":"D:\\TLE9879\\Project\\TLE9879QXA40_TIMER2_BLINK\\Led_Blink_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: Led_Blink_private.h\r\n *\r\n * Code generated for Simulink model 'Led_Blink'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun  1 21:03:42 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_Led_Blink_private_h_\r\n#define RTW_HEADER_Led_Blink_private_h_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* RTW_HEADER_Led_Blink_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Led_Blink_types.h","type":"header","group":"model","path":"D:\\TLE9879\\Project\\TLE9879QXA40_TIMER2_BLINK\\Led_Blink_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: Led_Blink_types.h\r\n *\r\n * Code generated for Simulink model 'Led_Blink'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun  1 21:03:42 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_Led_Blink_types_h_\r\n#define RTW_HEADER_Led_Blink_types_h_\r\n\r\n/* Model Code Variants */\r\n#endif                                 /* RTW_HEADER_Led_Blink_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"D:\\TLE9879\\Project\\TLE9879QXA40_TIMER2_BLINK\\Led_Blink_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'Led_Blink'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun  1 21:03:42 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"D:\\TLE9879\\Project\\TLE9879QXA40_TIMER2_BLINK\\Led_Blink_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * File: rtmodel.h\r\n *\r\n * Code generated for Simulink model 'Led_Blink'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Wed Jun  1 21:03:42 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"Led_Blink.h\"\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((void*) 0)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((void) 0)\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"trace":"{\"model\":\"Led_Blink\",\"sources\":[\"Led_Blink.c\",\"Led_Blink.h\"],\"categoricalProps\":[\"ModelElemCategory\",\"StorageClass\"],\"categoricalValues\":[\"InternalData\",\"Default\",\"Outports\"],\"sidPrefixes\":[\"Led_Blink\"],\"fileRecords\":{\"1\":{\"records\":[{\"tk\":[30,3,30,10],\"els\":[\"1:27\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[30,11,30,27],\"els\":[\"1:27\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[30,27,30,28],\"els\":[\"1:27\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[35,3,35,10],\"els\":[\"1:26\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[35,11,35,15],\"els\":[\"1:26\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[35,15,35,16],\"els\":[\"1:26\"],\"ct\":{\"1\":1,\"0\":2}}]},\"0\":{\"records\":[{\"tk\":[31,3,31,21],\"els\":[\"0:27#out:1\"]},{\"tk\":[31,22,31,23],\"els\":[\"0:27\"]},{\"tk\":[31,26,31,38],\"els\":[\"0:27\"]},{\"tk\":[31,39,31,55],\"els\":[\"0:27\"]},{\"tk\":[31,56,31,57],\"els\":[\"0:27\"]},{\"tk\":[31,58,31,61],\"els\":[\"0:27\"]},{\"tk\":[31,63,31,65],\"els\":[\"0:27\"]},{\"tk\":[32,26,32,38],\"els\":[\"0:27\"]},{\"tk\":[32,39,32,55],\"els\":[\"0:27\"]},{\"tk\":[32,56,32,58],\"els\":[\"0:27\"]},{\"tk\":[32,59,32,60],\"els\":[\"0:27\"]},{\"tk\":[33,3,33,5],\"els\":[\"0:27\"]},{\"tk\":[33,7,33,19],\"els\":[\"0:27\"]},{\"tk\":[33,20,33,36],\"els\":[\"0:27\"]},{\"tk\":[33,37,33,39],\"els\":[\"0:27\"]},{\"tk\":[33,40,33,43],\"els\":[\"0:27\"]},{\"tk\":[34,5,34,17],\"els\":[\"0:27\"]},{\"tk\":[34,18,34,34],\"els\":[\"0:27\"]},{\"tk\":[34,35,34,36],\"els\":[\"0:27\"]},{\"tk\":[34,37,34,38],\"els\":[\"0:27\"]},{\"tk\":[36,5,36,17],\"els\":[\"0:27\"]},{\"tk\":[36,18,36,34],\"els\":[\"0:27\"]},{\"tk\":[36,34,36,36],\"els\":[\"0:27\"]},{\"tk\":[44,3,44,14],\"els\":[\"0:26\"]},{\"tk\":[44,15,44,19],\"els\":[\"0:26\"]},{\"tk\":[44,20,44,21],\"els\":[\"0:26\"]},{\"tk\":[44,22,44,23],\"els\":[\"0:26\"]},{\"tk\":[44,31,44,49],\"els\":[\"0:27#out:1\"]},{\"tk\":[57,3,57,15],\"els\":[\"0:27\"]},{\"tk\":[57,16,57,32],\"els\":[\"0:27\"]},{\"tk\":[57,33,57,34],\"els\":[\"0:27\"]},{\"tk\":[57,35,57,36],\"els\":[\"0:27\"]}]}}}","blocks":[{"RTWName":"<Root>/Data Type Conversion","SIDString":"Led_Blink:28"},{"RTWName":"<Root>/Pulse\nGenerator","SIDString":"Led_Blink:27"},{"RTWName":"<Root>/Out1","SIDString":"Led_Blink:26"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};